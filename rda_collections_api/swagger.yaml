basePath: /v1
definitions:
  CollectionCapabilities:
    description: Capabilities define the set of actions that are supported by a collection.
    properties:
      appendsToEnd: {default: true, description: 'For an ordered collection, indicates
          that new items are appended to the end rather than insertable at a specified,
          possibly invalid, index points. Only valid if isOrdered is true.', type: boolean}
      isOrdered: {default: false, description: 'Identifies whether the collection
          items are kept in a consistent, meaningful order. The exact nature of the
          ordering is not specified, but see also appendsToEnd property.', type: boolean}
      maxLength: {default: -1, description: The maximum length of the Collection.
          -1 means length is not restricted., type: integer}
      membershipIsMutable: {default: true, description: Indicates whether collection
          membership mutable (i.e. whether members can be added and removed), type: boolean}
      metadataIsMutable: {default: true, description: Indicates whether collection
          metadata is mutable (i.e. can the metadata of this collection be changed),
        type: boolean}
      restrictedToType: {description: 'If specified, indicates that the collection
          is made up of homogenous items of the specified type. Type should be specified
          using the PID of a registered Data Type or a controlled vocabulary.', type: string}
      supportsRoles: {default: false, description: Indicates whether the collection
          supports assigning roles to its member items. Available roles are determined
          by the Collection Model type., type: boolean}
    required: [isOrdered, appendsToEnd, supportsRoles, membershipIsMutable, metadataIsMutable,
      restrictedToType, maxLength]
    type: object
  CollectionItemMappingMetadata:
    description: metadata on an item which is available by mapping from capabilities
    properties:
      dateAdded: {description: The date the item was added to the collection., format: date-time,
        type: string}
      index: {description: position of the item in the collection. Only available
          if the Collection isOrdered per its capabilities., type: integer}
      role: {description: The ole that applies to this item. Only available if the
          collection supportsRoles per its capabilities. A Controlled Vocabulary should
          be used., type: string}
    type: object
  CollectionObject:
    description: Defines the schema for a collection object.
    properties:
      capabilities: {$ref: '#/definitions/CollectionCapabilities'}
      description: {description: 'Descriptive metadata about the collection.  The
          properties available for this object are dependent upon the description
          ontology used, as define in the collection properties.', type: object}
      id: {description: Identifier for the collection. This is ideally a PID., type: string}
      properties: {$ref: '#/definitions/CollectionProperties'}
    required: [id, capabilities, properties]
    type: object
  CollectionOperations:
    description: Valid operation names.
    enum: [findMatch, intersection, union, flatten]
    type: string
  CollectionProperties:
    description: Functional Properties of the Collection
    properties:
      descriptionOntology: {description: Identifies the ontology used for descriptive
          metadata. Implementation is expected to supply the URI of a controlled vocabulary.,
        type: string}
      hasAccessRestrictions: {default: false, description: 'Indicates whether the
          collection is fully open or has access restrictions. ', type: boolean}
      license: {description: 'Indicates the license that applies to the Collection.
          Implementation is expected to use a controlled vocabulary, stable URIs or
          PIDs of registered data types. ', type: string}
      memberOf:
        default: []
        description: If provided, this is a list of collection identifiers to which
          this collection itself belongs. This property is only meaningful if the
          service features supports a  maximumExpansionDepth > 0.
        items: {type: string}
        type: array
      modelType: {description: 'Identifies the model that the collection adheres to.
          Iimplementation is expected to use a controlled vocabulary, or PIDs of registered
          data types. ', type: string}
      ownership: {description: Indicates the owner of the Collection. Implementation
          is expected to use a controlled vocabulary or PIDs., type: string}
    required: [ownership, license, modelType, hasAccessRestrictions, descriptionOntology]
    type: object
  CollectionResultSet:
    description: A resultset containing a potentially iterable list of Collections
      Objects. This is the  schema for the response to any request which retrieves
      collection items.
    properties:
      contents:
        description: list of Collection Objects returned in response to a query
        items: {$ref: '#/definitions/CollectionObject'}
        type: array
      next_cursor: {description: 'If the service supports pagination, and the resultset
          is paginated, this will be a cursor which can be used to retrieve the next
          page in the results.', type: string}
      prev_cursor: {description: 'If the service supports pagination, and the resultset
          is paginated, this will be a cursor which can be used to retrieve the next
          page in the results.', type: string}
    required: [contents]
    type: object
  Error:
    description: A error response object
    properties:
      code: {description: error code, format: int32, type: integer}
      message: {description: error message, type: string}
    type: object
  MemberItem:
    description: A member item in a collection
    properties:
      datatype: {description: URI of the data type of this item, type: string}
      id: {description: Identifier for the member, type: string}
      location: {description: Location at which the item data can be retrieved, type: string}
      mappings: {$ref: '#/definitions/CollectionItemMappingMetadata'}
      ontology: {description: URI of an ontology model class that applies to this
          item, type: string}
    required: [id, location]
    type: object
  MemberResultSet:
    description: A resultset containing a potentially iterable list of Member Items.
      This is the schema for the response to any request which retrieves collection
      members.
    properties:
      contents:
        description: list of Member Items returned in responses to a query
        items: {$ref: '#/definitions/MemberItem'}
        type: array
      next_cursor: {description: 'If the service supports pagination, and the resultset
          is paginated, this will be cursor which can be used to retrieve the next
          page in the results.', type: string}
      prev_cursor: {description: 'If the service supports pagination, and the resultset
          is paginated, this will be cursor which can be used to retrieve the next
          page in the results.', type: string}
    required: [contents]
    type: object
  ServiceFeatures:
    description: Describes the properties of the response to the Service /features
      request.
    properties:
      asynchronousActions: {default: false, description: 'Indicates whether or not
          actions such as update, delete occur synchronously or may be queued for
          later action.', type: boolean}
      collectionPidProviderType: {description: 'Identifies the PID provider service
          used by the Collection Service to create new PIDs for new Collection. Required
          if providesCollectionPids is true, otherwise this property is optional and
          has no meaning. Recommended to use a Controlled Vocabulary or registered
          Data Types', type: string}
      enforcesAccess: {default: false, description: Indicates whether or not the service
          enforces access controls on requests. Implementation details access are
          left up to the implementor. This flag simply states whether or not the Service
          enforces access., type: boolean}
      maxExpansionDepth: {default: 0, description: The maximum depth to which collection
          members can be expanded. A value of 0 means that expansion is not supppoted.
          A value of -1 means that the collections can be expanded to infinite depth.,
        type: integer}
      providesCollectionPids: {default: false, description: 'Indicates whether this
          services provides collection PIDs for new collections. If this is false,
          requests for new Collections must supply the PID for the collection. If
          this is true, the Service will use its default PID provider (as advertised
          via the collectionPidProviderType feature) to create new PIDs to assign
          to new Collections.', type: boolean}
      providesVersioning: {default: false, description: Indicates whether the service
          offers support for versioning of Collections. Implementation details are
          left up to the implementor., type: boolean}
      ruleBasedGeneration: {description: Indicates whether or not the service allows
          rule-based generation of new collections., type: boolean}
      supportedCollectionOperations:
        default: []
        description: List of collection-level set operations that are supported by
          this service.
        items:
        - {$ref: '#/definitions/CollectionOperations'}
        type: array
      supportedModelTypes:
        default: []
        description: List of collection model types supported by this service.  Recommended
          to use a Controlled Vocabulary or registered Data Types
        items:
        - {type: string}
        type: array
      supportsPagination: {default: false, description: Indicates whether or not the
          service offers pagination (via cursors) of response data., type: boolean}
    required: [providesCollectionPids, enforcesAccess, supportsPagination, asynchronousActions,
      ruleBasedGeneration, maxExpansionDepth, providesVersioning, supportedCollectionOperations,
      supportedModelTypes]
    type: object
host: '{{ hostname }}:{{ port }}'
info: {description: API Strawman for RDA Research Data Collections WG, title: RDA
    Collections API, version: 1.0.0}
paths:
  /collections:
    get:
      description: This request returns a list of the collections provided by this
        service.  This may be a complete list, or if the service features include
        support for pagination, the cursors in the response may be used to iterate
        backwards and forwards through pages of partial results. Query parameters
        may be used to supply filtering criteria for the response. When combining
        filters of different types, the boolean AND will be used. When combining multiple
        instances of filters of the same type, the boolean OR will be used.
      operationId: '{{ app_name }}.api.collections.collections_list'
      parameters:
      - {collectionFormat: multi, description: Filter response by the modelType property
          of the collection., in: query, name: f_modelType, required: false, type: string}
      - {collectionFormat: multi, description: Filter response by the data type of
          contained collection member. A collection will meet this requirement if
          any of its members are of the requested type., in: query, name: f_memberType,
        required: false, type: string}
      - {collectionFormat: multi, description: Filter response by the ownership property
          of the collection, in: query, name: f_ownership, type: string}
      responses:
        '200':
          description: A resultset containing a list of collection objects.
          schema: {$ref: '#/definitions/CollectionResultSet'}
        '400':
          description: Invalid Input. The query was malformed.
          schema: {$ref: '#/definitions/Error'}
      summary: Get a list of all collections
      tags: [Collections]
    post:
      description: 'This request adds a new collection to the collection store.  The
        Collection Object properties must be supplied in the  body of the request. '
      operationId: '{{ app_name }}.api.collections.post'
      parameters:
      - description: The properties of the collection.
        in: body
        name: content
        required: true
        schema: {$ref: '#/definitions/CollectionObject'}
      responses:
        '201':
          description: Successful creation
          schema: {$ref: '#/definitions/CollectionObject'}
        '202': {description: 'Accepted create request. Empty response body. (For asyncrhonous
            requests,  if supported by the service features).'}
        '400':
          description: Invalid Input. The collection properties were malformed or
            invalid.
          schema: {$ref: '#/definitions/Error'}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
      security:
      - oauth: [write]
      summary: Create a new collection.
      tags: [Collections]
  /collections/{id}:
    delete:
      description: This request deletes the collection idenified by the provided id
        from the collection store. The response may differ depending upon whether
        or not the service features include support for synchronous actions.
      operationId: '{{ app_name }}.api.collections.delete'
      parameters:
      - {description: identifier for the collection, in: path, name: id, required: true,
        type: string}
      responses:
        '200': {description: Successful deletion. Empty response body.}
        '202': {description: Accepted deletion request. Empty response body. (For
            asynchronous requests if supported by service features.)}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '404':
          description: The collection identified for deletion was not found
          schema: {$ref: '#/definitions/Error'}
      security:
      - oauth: [write]
      summary: Delete a collection
      tags: [Collections]
    get:
      description: This request returns the Collection Object Properties for the collection
        identified by the provided id.
      operationId: '{{ app_name }}.api.collections.get'
      parameters:
      - {description: Identifier for the collection, in: path, name: id, required: true,
        type: string}
      responses:
        '200':
          description: The requested collection
          schema: {$ref: '#/definitions/CollectionObject'}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '404':
          description: The requested collection was not found
          schema: {$ref: '#/definitions/Error'}
      summary: Get the properties of a specific collection.
      tags: [Collections]
    put:
      description: This request updates the properties of the collection identified
        by the provided id. The updated collection properties must be supplied in
        the body of the request. The response may differ depending upon whether or
        not the  service features include support for syncrhonous actions.
      operationId: '{{ app_name }}.api.collections.put'
      parameters:
      - {description: Persistent identifier for the collection, in: path, name: id,
        required: true, type: string}
      - description: The properties of the colleciton to be updated.
        in: body
        name: content
        required: true
        schema: {$ref: '#/definitions/CollectionObject'}
      responses:
        '200':
          description: Successful update, returns the updated collection.
          schema: {$ref: '#/definitions/CollectionObject'}
        '202': {description: Accepted update request. Empty response body. (For asynchronous
            requests if supported by service features.)}
        '400':
          description: Invalid Input. The collection properties were malformed or
            invalid.
          schema: {$ref: '#/definitions/Error'}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '403':
          description: Forbidden. May be returned, for example, if a request was made
            to update a collection whose metadata is not mutable.
          schema: {$ref: '#/definitions/Error'}
        '404':
          description: The collection identified for update was not found
          schema: {$ref: '#/definitions/Error'}
      security:
      - oauth: [modify]
      summary: Update the properties of a Collection Object
      tags: [Collections]
  /collections/{id}/capabilities:
    get:
      description: This request returns the capabilities metadata for the collection
        identified by the supplied id. The collection capabilities describe the actions
        and operations that are available for this collection.
      operationId: '{{ app_name }}.api.collections.get_capabilities'
      parameters:
      - {description: Identifier for the collection, in: path, name: id, required: true,
        type: string}
      responses:
        '200':
          description: The collection capabilities metadata.
          schema: {$ref: '#/definitions/CollectionCapabilities'}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '404':
          description: The collection identified was not found
          schema: {$ref: '#/definitions/Error'}
      summary: Get the capabilities of this collection
      tags: [Collections]
  /collections/{id}/members:
    get:
      description: This request returns the list of members contained in a collection.  This
        may be a complete list, or if the service features include support for pagination,
        the cursors in the response may be used to iterate backwards and forwards
        through pages of partial results. Query parameters may be used to supply filtering
        criteria for the response. When combining filters of different types, the
        boolean AND will be used. When combining multiple instances of filters of
        the same type, the boolean OR will be used.
      operationId: '{{ app_name }}.api.members.members_list'
      parameters:
      - {description: Identifier for the collection, in: path, name: id, required: true,
        type: string}
      - {collectionFormat: multi, description: Filter response to members matching
          the requested datatype., in: query, name: f_datatype, required: false, type: string}
      - {collectionFormat: multi, description: Filter response to members who are
          assigned the requested role. (Only if the collection capability supportsRoles
          is true)., in: query, name: f_role, required: false, type: string}
      - {collectionFormat: multi, description: Filter response to the members assigned
          the requested index. (Only if the collection capability isOrdered is true).,
        in: query, name: f_index, required: false, type: integer}
      - {description: Filter response to the membered added on the requestd datetime.,
        format: date-time, in: query, name: f_dateAdded, required: false, type: string}
      - {description: cursor for iterating a prior response to this query, in: query,
        name: cursor, type: string}
      - {description: expand members which are collections to this depth. may not
          exceed maxExpansionDepth feature setting for the service., in: query, name: expandDepth,
        required: false, type: integer}
      responses:
        '200':
          description: A resultset containing the list of member items in the identified
            collection.
          schema: {$ref: '#/definitions/MemberResultSet'}
        '400':
          description: Invalid input. The filter query was malformed.
          schema: {$ref: '#/definitions/Error'}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '404':
          description: The collection identified was not found
          schema: {$ref: '#/definitions/Error'}
      summary: Get the members in a collection
      tags: [Members]
    post:
      description: 'This request adds a new member item to a collection. If the service
        features include support for PID assignment to member items, then if no id
        is supplied for the item it  will be assigned automatically.  '
      operationId: '{{ app_name }}.api.members.post'
      parameters:
      - {description: Identifier for the collection, in: path, name: id, required: true,
        type: string}
      - description: The properties of the member item to add to the collection. Id
          may be required.
        in: body
        name: content
        required: true
        schema: {$ref: '#/definitions/MemberItem'}
      responses:
        '201':
          description: Successful creation
          schema: {$ref: '#/definitions/MemberItem'}
        '202': {description: 'Accepted add request. Empty response body. (For asyncrhonous
            requests,  if supported by the service features).'}
        '400': {description: Invalid Request. Indicates that member properties were
            incorrect or invalid in  some way.}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '403': {description: 'Forbidden. May be returned, for example, if a request
            was made to add  an item to a static collection.'}
        '404':
          description: Not found. The collection was not found for adding items.
          schema: {$ref: '#/definitions/Error'}
      security:
      - oauth: [write]
      summary: Add a new member item to this collection
      tags: [Members]
  /collections/{id}/members/{mid}:
    delete:
      description: Removes a member item from a collection. The response may differ
        depending upon whether or not the  service features include support for asynchronous
        actions.
      operationId: '{{ app_name }}.api.members.delete'
      parameters:
      - {description: Persistent identifier for the collection, in: path, name: id,
        required: true, type: string}
      - {description: Identifier for the collection member, in: path, name: mid, required: true,
        type: string}
      responses:
        '200': {description: Successful removal. Empty response body.}
        '202': {description: 'Accepted request. Empty response body. (For asynchronous
            requests, if supported by service features.)'}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '403': {description: 'Forbidden. May be returned, for example, if a request
            was made to remove  item from a static collection.'}
        '404':
          description: Not Found
          schema: {$ref: '#/definitions/Error'}
        default:
          description: Unexpected error
          schema: {$ref: '#/definitions/Error'}
      security:
      - oauth: [write]
      summary: Remove a collection member item.
      tags: [Members]
    get:
      description: This request retrieves the properties of a specific member item
        from a collection
      operationId: '{{ app_name }}.api.members.get'
      parameters:
      - {description: Identifier for the collection, in: path, name: id, required: true,
        type: string}
      - {description: Identifier for the collection member item., in: path, name: mid,
        required: true, type: string}
      responses:
        '200':
          description: The requested member
          schema: {$ref: '#/definitions/MemberItem'}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '404':
          description: Not found. The requested collection or member item was not
            found.
          schema: {$ref: '#/definitions/Error'}
      summary: Get the properties of a member item in a collection
      tags: [Members]
    put:
      description: This request updates the properties of a collection member item.  The
        updated member  properties must be supplied in the body of the request. The
        response may differ  depending upon whether or not the  service features include
        support  for asynchronous actions.
      operationId: '{{ app_name }}.api.members.put'
      parameters:
      - {description: Identifier for the collection, in: path, name: id, required: true,
        type: string}
      - {description: Identifier for the collection member, in: path, name: mid, required: true,
        type: string}
      - description: collection metadata
        in: body
        name: content
        required: true
        schema: {$ref: '#/definitions/CollectionObject'}
      responses:
        '200':
          description: Successful update. The updated member item is returned in the
            response.
          schema: {$ref: '#/definitions/MemberItem'}
        '202': {description: Accepted update request. Empty response body. (For asynchronous
            requests if supported by service features.)}
        '400':
          description: Invalid Input
          schema: {$ref: '#/definitions/Error'}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '403':
          description: Forbidden. May be returned, for example, if a request was made
            to update an item in a static collection.
          schema: {$ref: '#/definitions/Error'}
        '404':
          description: Not found. The requested collection or member item was not
            found.
          schema: {$ref: '#/definitions/Error'}
      security:
      - oauth: [modify]
      summary: Update the properties of a collection member item.
      tags: [Members]
  /collections/{id}/members/{mid}/properties/{property}:
    delete:
      description: This request deletes a specific named property of a specific member
        item from a collection
      operationId: '{{ app_name }}.api.members.delete_property'
      parameters:
      - {description: Identifier for the collection, in: path, name: id, required: true,
        type: string}
      - {description: Identifier for the collection member item., in: path, name: mid,
        required: true, type: string}
      - {description: the name of a property to update, in: path, name: property,
        required: true, type: string}
      responses:
        '200': {description: Successful deletion. Empty response body.}
        '202': {description: 'Accepted delete request. Empty response body. (For asyncrhonous
            requests, if supported by service features.)'}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '403': {description: 'Forbidden. May be returned, for example, if a request
            was made to delete a required metadata property or update a static item.'}
        '404':
          description: Not found. The requested collection or member item was not
            found.
          schema: {$ref: '#/definitions/Error'}
      summary: Delete a named property of a member item in a collection
      tags: [Members]
    get:
      description: This request retrieves a specific named property of a specific
        member item from a collection
      operationId: '{{ app_name }}.api.members.get_property'
      parameters:
      - {description: Identifier for the collection, in: path, name: id, required: true,
        type: string}
      - {description: Identifier for the collection member item., in: path, name: mid,
        required: true, type: string}
      - {description: the name of a property to retrieve (e.g. index), in: path, name: property,
        required: true, type: string}
      responses:
        '200':
          description: The requested member
          schema: {$ref: '#/definitions/MemberItem'}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '404':
          description: Not found. The requested collection or member item was not
            found.
          schema: {$ref: '#/definitions/Error'}
      summary: Get a named property of a member item in a collection
      tags: [Members]
    put:
      description: This request updates a specific named property of a specific member
        item from a collection
      operationId: '{{ app_name }}.api.members.put_property'
      parameters:
      - {description: Identifier for the collection, in: path, name: id, required: true,
        type: string}
      - {description: Identifier for the collection member item., in: path, name: mid,
        required: true, type: string}
      - {description: the name of a property to update, in: path, name: property,
        required: true, type: string}
      - description: new property value
        in: body
        name: content
        required: true
        schema: {type: string}
      responses:
        '200':
          description: Successful update. The updated member item is returned in the
            response.
          schema: {$ref: '#/definitions/MemberItem'}
        '202': {description: 'Accepted update request. Empty response body. (For asynchronous
            requests, if supported by service features.)'}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '403': {description: 'Forbidden. May be returned, for example, if a request
            was made to update a static item.'}
        '404':
          description: Not found. The requested collection or member item was not
            found.
          schema: {$ref: '#/definitions/Error'}
      summary: Update a named property of a member item in a collection
      tags: [Members]
  /collections/{id}/ops/findMatch:
    post:
      description: This request accepts as input the complete or partial properties
        of a member object and returns a ResultSet containing any objects which were
        deemed to 'match' the supplied properties among the members of the identified
        collection. If the service features include support for pagination, a cursor
        may be supplied to iterate backwards and forwards through paged results from
        prior executions of this query.
      operationId: '{{ app_name }}.api.collections_ops.matching_members'
      parameters:
      - {description: identifier for the collection, in: path, name: id, required: true,
        type: string}
      - description: the member item properties to use when matching
        in: body
        name: memberProperties
        required: true
        schema: {$ref: '#/definitions/MemberItem'}
      - {description: 'If the service supports pagination and a cursor was returned
          in a prior  response to this query, this can be used to requeste a particular
          page of the  results.', in: query, name: cursor, type: string}
      responses:
        '200':
          description: A resulset containing the matching member items from the two
            collections.
          schema: {$ref: '#/definitions/MemberResultSet'}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '404':
          description: The collection identified was not found
          schema: {$ref: '#/definitions/Error'}
      security:
      - oauth: [read]
      summary: Find member objects in a collection which match the supplied member
        object
      tags: [Collections]
  /collections/{id}/ops/flatten:
    get:
      description: This request returns a resultset which is a flattened representation
        of a collection of collections into a single collection.
      operationId: '{{ app_name }}.api.collections_ops.flatten'
      parameters:
      - {description: Identifier for the collection to be flattened, in: path, name: id,
        required: true, type: string}
      - {description: 'If the service supports pagination and a cursor was returned
          in a prior response to this query, this can be used to requeste a particular
          page of the results.', in: query, name: cursor, type: string}
      responses:
        '200':
          description: A resultset containing the union of member items from the two
            collections
          schema: {$ref: '#/definitions/MemberResultSet'}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '404':
          description: One or both of the requested collections was not found.
          schema: {$ref: '#/definitions/Error'}
      security:
      - oauth: [read]
      summary: Flattens the collection
      tags: [Collections]
  /collections/{id}/ops/intersection/{otherId}:
    get:
      description: This request returns a resultset containing the members at the
        intersection of two collections. If the service features include support for
        pagination, a cursor may be supplied to iterate backwards and forwards through
        paged results from prior executions of this query. The response may be an
        empty set.
      operationId: '{{ app_name }}.api.collections_ops.intersection'
      parameters:
      - {description: Identifier for the first collection in the operation, in: path,
        name: id, required: true, type: string}
      - {description: Identifier for the second collection in the operation, in: path,
        name: otherId, required: true, type: string}
      - {description: 'If the service supports pagination and a cursor was returned
          in a prior response to this query, this can be used to requeste a particular
          page of the results.', in: query, name: cursor, type: string}
      responses:
        '200':
          description: A resultset containing the intersection of member items from
            the two collections.
          schema: {$ref: '#/definitions/MemberResultSet'}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '404':
          description: One or both of the requested collections was not found.
          schema: {$ref: '#/definitions/Error'}
      security:
      - oauth: [read]
      summary: Retrieve the members at the intersection of two collections
      tags: [Collections]
  /collections/{id}/ops/union/{otherId}:
    get:
      description: This request returns a resultset containing the members at the
        union of two collections. If the service features include support for pagination,
        a cursor may be supplied to iterate backwards and forwards through paged results
        from prior executions of this query. The response may be an empty set.
      operationId: '{{ app_name }}.api.collections_ops.union'
      parameters:
      - {description: Identifier for the first collection in the operation, in: path,
        name: id, required: true, type: string}
      - {description: Identifier for the second collection in the operation, in: path,
        name: otherId, required: true, type: string}
      - {description: 'If the service supports pagination and a cursor was returned
          in a prior response to this query, this can be used to requeste a particular
          page of the results.', in: query, name: cursor, type: string}
      responses:
        '200':
          description: A resultset containing the union of member items from the two
            collections
          schema: {$ref: '#/definitions/MemberResultSet'}
        '401':
          description: Unauthorized. Request was not authorized.
          schema: {$ref: '#/definitions/Error'}
        '404':
          description: One or both of the requested collections was not found.
          schema: {$ref: '#/definitions/Error'}
      security:
      - oauth: [read]
      summary: Retrieve the union of two collections
      tags: [Collections]
  /features:
    get:
      description: This request returns the service-level features. Examples of service-level
        features might include whether or not the service supports assignment of PIDs
        for collection members, whether it supports pagination and cursors, whether
        it enforces  access controls, etc.
      operationId: '{{ app_name }}.api.features.get'
      responses:
        '200':
          description: Service Level Features
          schema: {$ref: '#/definitions/ServiceFeatures'}
      summary: Gets the service-level features.
      tags: [Service]
produces: [application/json]
schemes: [https]
securityDefinitions:
  oauth:
    authorizationUrl: http://example.org/oauth/authorize
    flow: accessCode
    scopes: {modify: Can modify collections, read: Can read collections, write: Can
        write collections}
    tokenUrl: http://example.org/oauth/token
    type: oauth2
swagger: '2.0'
